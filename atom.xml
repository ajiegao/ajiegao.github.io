<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[ajiegao]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://ajiegao.com/"/>
  <updated>2014-12-17T11:00:06.915Z</updated>
  <id>http://ajiegao.com/</id>
  
  <author>
    <name><![CDATA[ajie]]></name>
    <email><![CDATA[ajiegaoxf@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[gulp同步任务]]></title>
    <link href="http://ajiegao.com/2014/12/17/gulp-async-task/"/>
    <id>http://ajiegao.com/2014/12/17/gulp-async-task/</id>
    <published>2014-12-17T03:17:20.000Z</published>
    <updated>2014-12-17T10:23:27.000Z</updated>
    <content type="html"><![CDATA[<p>gulp使用中如果有多个步骤需要读写同一个文件，或者下一步要使用上一步生成文件，这时就要用到同步任务了。</p>
<p>官方文档中有<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">异步任务支持</a></p>
<p>首先挑最简单的 <code>Return stream</code>方法，这时跑任务不是顺序执行的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'js/**'</span>)</div><div class="line">        .pipe(concat(<span class="string">'script.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">});</div><div class="line">gulp.task(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'test task'</span>);</div><div class="line">});</div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'test'</span>])</div></pre></td></tr></table></figure>

<p><a id="more"></a><br>我们给test任务添加依赖，任务成功顺序执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'test'</span>, [<span class="string">'script'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'test task'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>现在我们换用 <code>callback</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> </span>{  </div><div class="line">    gulp.src(<span class="string">'js/**'</span>)</div><div class="line">        .pipe(concat(<span class="string">'script.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">    cb();</div><div class="line">});</div></pre></td></tr></table></figure>

<p>什吗玩意儿，根本不起作用，当然不起作用了， 正确的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> </span>{  </div><div class="line">    gulp.src(<span class="string">'js/**'</span>)</div><div class="line">        .pipe(concat(<span class="string">'script.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">        .on(<span class="string">'end'</span>, cb);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>任务成功顺序执行。 promise方法同理，需要加入依赖</p>
<p>假如我们有多个压缩合并的任务,同样要添加依赖</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'test'</span>, [<span class="string">'script'</span>,<span class="string">'script2'</span>,<span class="string">'script3'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'test task'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>如果不想嵌入那么多依赖，也可以这样嵌套用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    gulp.run(<span class="string">'cookie'</span>, <span class="string">'bootstrap'</span>);</div><div class="line">});</div><div class="line">gulp.task(<span class="string">'test'</span>, [<span class="string">'script'</span>,<span class="string">'script2'</span>,<span class="string">'script3'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    gulp.run(<span class="string">'test'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<h2 id="总结">总结</h2>
<ul>
<li>要顺序执行任务，先执行的任务需要做异步处理(返回文档流/callback/promise)</li>
<li>要顺序执行任务, 必须使用依赖</li>
</ul>
<h2 id="参考">参考</h2>
<p><a href="http://cameronspear.com/blog/handling-sync-tasks-with-gulp-js" target="_blank" rel="external">Handling Sync Tasks with Gulp JS</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>gulp使用中如果有多个步骤需要读写同一个文件，或者下一步要使用上一步生成文件，这时就要用到同步任务了。</p>
<p>官方文档中有<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">异步任务支持</a></p>
<p>首先挑最简单的 <code>Return stream</code>方法，这时跑任务不是顺序执行的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'js/**'</span>)</div><div class="line">        .pipe(concat(<span class="string">'script.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">});</div><div class="line">gulp.task(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'test task'</span>);</div><div class="line">});</div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'test'</span>])</div></pre></td></tr></table></figure>

<p>]]>
    
    </summary>
    
      <category term="gulp" scheme="http://ajiegao.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angularjs form实践(1)]]></title>
    <link href="http://ajiegao.com/2014/11/27/Angularjs-form-1/"/>
    <id>http://ajiegao.com/2014/11/27/Angularjs-form-1/</id>
    <published>2014-11-27T12:16:04.000Z</published>
    <updated>2014-12-17T10:23:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="ng表单验证">ng表单验证</h2>
<p>form是ng中<code>FormController</code>的一个实例。<br>同理，表单元素也是<code>ngModalController</code>的实例。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">form</span>&gt;</span><span class="tag">&lt;/<span class="title">form</span>&gt;</span></div></pre></td></tr></table></figure>

<p>表单和元素都需要一个<code>name</code>属性去做验证。<br><code>novalidate</code>属性可以阻止表单自身的验证动作。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">name</span>=<span class="value">"loginForm"</span> <span class="attribute">novalidate</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></div></pre></td></tr></table></figure>

<a id="more"></a><br>表单验证状态<br>—-<br>ng默认提供以下状态<br><em> <code>$valid</code>:   验证通过
</em> <code>$invalid</code>: 验证未通过<br><em> <code>$pristine</code>:还没有交互
</em> <code>$dirty</code>:   已经有交互<br><em> <code>$error</code>:   错误状态<br><br>获取方法 <code>&lt;form name&gt;.&lt;angular property&gt;</code> 或 <code>&lt;form name&gt;.&lt;input name&gt;.&lt;angular property&gt;</code>。 例<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">loginForm.$valid</div><div class="line">loginForm.username.$valid</div></pre></td></tr></table></figure><br><br>除了<code>$error</code>其他四个状态都是Boolean。<br><br><br>表单元素属性验证<br>—-<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">required</span> <span class="attribute">ng-model</span>=<span class="value">"user.username"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.username.$error.required"</span>&gt;</span>Required<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div></pre></td></tr></table></figure><br><br>以上例子<code>input</code>有一个<code>required</code>属性，<code>span</code>标签用来验证状态展示，<br>在<code>required</code>验证未通过时显示。<br><br>需要注意 <em>*所有需要验证的元素都必须用ngModel</em></em><br><br>ng自带的一些属性验证和相对应的验证状态有<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ng-required=<span class="string">"..."</span>	    ngModel.$error.required</div><div class="line">ng-minlength=<span class="string">"number"</span>   ngModel.$error.minlength</div><div class="line">ng-maxlength=<span class="string">"number"</span>   ngModel.$error.maxlength</div><div class="line">ng-min=<span class="string">"number"</span>         ngModel.$error.min</div><div class="line">ng-max=<span class="string">"number"</span>         ngModel.$error.max</div><div class="line">ng-pattern=<span class="string">"pattern"</span>	ngModel.$error.pattern</div></pre></td></tr></table></figure><br><br><code>$error</code>状态可以访问ng定义的属性对应的状态<br><br>这样就能完善上面的username验证<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">input</span></span></div><div class="line">    <span class="attribute">name</span>=<span class="value">"username"</span></div><div class="line">    <span class="attribute">type</span>=<span class="value">"text"</span></div><div class="line">    <span class="attribute">placeholder</span>=<span class="value">"Username"</span></div><div class="line">    <span class="attribute">ng-model</span>=<span class="value">"user.username"</span></div><div class="line">    <span class="attribute">minlength</span>=<span class="value">"5"</span></div><div class="line">    <span class="attribute">maxlength</span>=<span class="value">"100"</span></div><div class="line">    <span class="attribute">required</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.username.$error.required"</span>&gt;</span>Required<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.username.$error.minlength"</span>&gt;</span>too little<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.username.$error.maxlength"</span>&gt;</span>too much<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div></pre></td></tr></table></figure><br><br>required, minlength, maxlength, min, max, pattern很好理解，和html5提供的元素属性类似<br>，pattern属性是用于正则验证，值就是正则的pattern， 如手机号码验证<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">input</span></span></div><div class="line">    <span class="attribute">type</span>=<span class="value">"text"</span></div><div class="line">    <span class="attribute">placeholder</span>=<span class="value">"phone"</span></div><div class="line">    <span class="attribute">name</span>=<span class="value">"mobile"</span></div><div class="line">    <span class="attribute">ng-model</span>=<span class="value">"user.phone"</span></div><div class="line">    <span class="attribute">ng-pattern</span>=<span class="value">"/1[3|5|7|8|][0-9]{9}/"</span></div><div class="line">    <span class="attribute">required</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.username.$error.pattern"</span>&gt;</span>Wrong phone number <span class="tag">&lt;/<span class="title">span</span>&gt;</span></div></pre></td></tr></table></figure><br><br>表单元素类型验证<br>—-<br>ng自定义类型和所对应状态有<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">type=<span class="string">"email"</span>	ngModel.$error.email</div><div class="line">type=<span class="string">"url"</span>	    ngModel.$error.url</div><div class="line">type=<span class="string">"number"</span>	ngModel.$error.number</div><div class="line">type=<span class="string">"date"</span>	    ngModel.$error.date</div><div class="line">type=<span class="string">"time"</span>	    ngModel.$error.time</div><div class="line">type=<span class="string">"datetime"</span>	ngModel.$error.datetimelocal</div><div class="line">type=<span class="string">"week"</span>	    ngModel.$error.week</div><div class="line">type=<span class="string">"month"</span>	ngModel.$error.month</div></pre></td></tr></table></figure><br><br>同样从<code>$error</code>状态集合中可以访问<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">input</span></span></div><div class="line">    <span class="attribute">name</span>=<span class="value">"email"</span></div><div class="line">    <span class="attribute">type</span>=<span class="value">"email"</span></div><div class="line">    <span class="attribute">placeholder</span>=<span class="value">"Email"</span></div><div class="line">    <span class="attribute">ng-model</span>=<span class="value">"user.email"</span></div><div class="line">    <span class="attribute">required</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.email.$error.required"</span>&gt;</span>Need email<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.email.$error.email"</span>&gt;</span>Wrong email<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div></pre></td></tr></table></figure><br><br>使用css 和 css classes<br>—-<br>可以设置和所对应状态同名的class<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class">.ng-valid</span> <span class="rules">{<span class="rule">}</span></span></div><div class="line"><span class="class">.ng-invalid</span> <span class="rules">{<span class="rule">}</span></span></div><div class="line"><span class="class">.ng-pristine</span> <span class="rules">{<span class="rule">}</span></span></div><div class="line"><span class="class">.ng-dirty</span> <span class="rules">{<span class="rule">}</span></span></div></pre></td></tr></table></figure><br><br>如官方文档的demo中有如下设置<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">input</span><span class="class">.ng-invalid</span><span class="class">.ng-dirty</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FA787E</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">input</span><span class="class">.ng-valid</span><span class="class">.ng-dirty</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#78FA89</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure><br><br>以状态改变class<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-class</span>=<span class="value">"{'error': loginForm.username.$invalid, 'success':loginForm.username.$valid}"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">placeholder</span>=<span class="value">"Username"</span> <span class="attribute">required</span> <span class="attribute">ng-model</span>=<span class="value">"user.username"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"loginForm.username.$error.required"</span>&gt;</span>Required<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure><br><br>禁用提交按钮<br>—-<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">ng-disabled</span>=<span class="value">"loginForm.$invalid"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div></pre></td></tr></table></figure><br><br><!-- 自定义触发条件
ng-model-options="{ updateOn: 'default blur' }"

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'loginController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>{</div><div class="line">    $scope.submitForm = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">if</span> ($scope.loginForm.$valid) {</div><div class="line">            <span class="comment">//to login</span></div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            $scope.loginForm.submitted = <span class="literal">true</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}]);</div></pre></td></tr></table></figure>

 -->


<h2 id="参考">参考</h2>
<ul>
<li><p><a href="https://docs.angularjs.org/guide/forms" target="_blank" rel="external">docs.angularjs</a></p>
</li>
<li><p><a href="http://www.yearofmoo.com/2014/09/taming-forms-in-angularjs-1-3.html" target="_blank" rel="external">Taming Forms in AngularJS 1.3</a></p>
</li>
<li><p><a href="http://www.ng-newsletter.com/posts/validations.html" target="_blank" rel="external">Form validation with AngularJS</a></p>
</li>
</ul>
<!-- 自定义验证

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'validationExample'</span>, []);</div><div class="line"></div><div class="line">app.directive(<span class="string">'ensureUnique'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    <span class="built_in">require</span>: <span class="string">'ngModel'</span>,</div><div class="line">    link: <span class="function"><span class="keyword">function</span><span class="params">(scope, ele, attrs, c)</span> </span>{</div><div class="line">      scope.$watch(attrs.ngModel, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        $http({</div><div class="line">          method: <span class="string">'POST'</span>,</div><div class="line">          url: <span class="string">'/api/check/'</span> + attrs.ensureUnique,</div><div class="line">          data: {<span class="string">'field'</span>: attrs.ensureUnique}</div><div class="line">        }).success(<span class="function"><span class="keyword">function</span><span class="params">(data, status, headers, cfg)</span> </span>{</div><div class="line">          c.$setValidity(<span class="string">'unique'</span>, data.isUnique);</div><div class="line">        }).error(<span class="function"><span class="keyword">function</span><span class="params">(data, status, headers, cfg)</span> </span>{</div><div class="line">          c.$setValidity(<span class="string">'unique'</span>, <span class="literal">false</span>);</div><div class="line">        });</div><div class="line">      });</div><div class="line">    }</div><div class="line">  }</div><div class="line">}]);</div></pre></td></tr></table></figure>

 -->
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="ng表单验证">ng表单验证</h2>
<p>form是ng中<code>FormController</code>的一个实例。<br>同理，表单元素也是<code>ngModalController</code>的实例。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">form</span>&gt;</span><span class="tag">&lt;/<span class="title">form</span>&gt;</span></div></pre></td></tr></table></figure>

<p>表单和元素都需要一个<code>name</code>属性去做验证。<br><code>novalidate</code>属性可以阻止表单自身的验证动作。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">name</span>=<span class="value">"loginForm"</span> <span class="attribute">novalidate</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="Angularjs" scheme="http://ajiegao.com/tags/Angularjs/"/>
    
  </entry>
  
</feed>
